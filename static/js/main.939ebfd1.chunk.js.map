{"version":3,"sources":["utils/index.js","actions/types.js","actions/index.js","sagas/allMoviesSaga.js","sagas/movieSaga.js","sagas/index.js","reducers/allMoviesReducer.js","reducers/movieReducer.js","reducers/index.js","errors/WithErrors.js","store.js","selectors/movieSelector.js","containers/DetailsContainer.js","selectors/allMoviesSelector.js","containers/HomeContainer.js","App.js","serviceWorker.js","index.js"],"names":["createAction","type","data","payload","API_KEY","ITEM","base","actions","reduce","acc","createActionTypes","item","GET_ALL_MOVIES","fetching","success","error","SUCCESS_ALL_MOVIES","FAILURE_ALL_MOVIES","id","GET_MOVIE_DETAILS","SUCCESS_MOVIE_DETAILS","FAILURE_MOVIE_DETAILS","handleGetAllMovies","watchAllMoviesSaga","action","call","axios","get","put","all","takeLatest","handleGetMovieDetails","watchMovieSaga","rootSaga","fork","initialState","fromJS","List","allMoviesReducer","state","merge","WrappedComponent","rootReducer","asyncReducers","combineReducers","allMovies","movie","movieReducer","sagaMiddleware","createSagaMiddleware","configureStore","composeEnhancers","compose","middlewares","enhancers","applyMiddleware","store","createStore","runSaga","run","close","dispatch","END","movieState","movieSelector","createSelector","fetchingSelector","DetailsContainer","useDispatch","movieId","useParams","useSelector","useEffect","logo","back","fit","stretch","toColumn","bkg","radius","marginAll","noShrink","details","color","title","original_title","name","release_date","marginTop","small","vote_average","autoColor","value","overview","large","genres","map","g","join","production_countries","c","Block","children","marginBottom","semibold","allMoviesState","allMoviesSelector","HomeContainer","results","to","WithErrors","exact","path","component","errorInfo","this","setState","style","whiteSpace","toString","componentStack","props","Component","Boolean","window","location","hostname","match","history","createBrowserHistory","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.939ebfd1.chunk.js","sourcesContent":["export function createActionTypes(base, actions = []) {\n  return actions.reduce((acc, type) => {\n    acc[type] = `${base}_${type}`;\n\n    return acc;\n  }, {});\n}\n\nexport function createAction(type, data = {}) {\n  return { type, payload: data };\n}\n\nexport const API_KEY = \"f5e1997e1aee777bf58aab88b75ffadb\";\n","import { createActionTypes } from \"../utils\";\n\nexport const ITEM = createActionTypes(\"ITEM\", [\n  // \"GET\",\n  \"GET_ALL_MOVIES\",\n  \"SUCCESS_ALL_MOVIES\",\n  \"FAILURE_ALL_MOVIES\",\n  \"GET_MOVIE_DETAILS\",\n  \"SUCCESS_MOVIE_DETAILS\",\n  \"FAILURE_MOVIE_DETAILS\",\n  // \"SAVE\",\n  // \"PUT\",\n  // \"PATCH\",\n  // \"DELETE\",\n]);\n\nexport default ITEM;\n","import { createAction } from \"../utils\";\nimport { ITEM } from \"./types\";\n\nexport const item = {\n  requestAllMovies: () =>\n    createAction(ITEM.GET_ALL_MOVIES, {\n      fetching: true,\n      success: false,\n      error: null,\n    }),\n  successAllMovies: (data) =>\n    createAction(ITEM.SUCCESS_ALL_MOVIES, {\n      ...data,\n      fetching: false,\n      success: true,\n      error: null,\n    }),\n  failureAllMovies: (error) =>\n    createAction(ITEM.FAILURE_ALL_MOVIES, {\n      ...error,\n      fetching: false,\n      success: false,\n    }),\n  requestMovieDetails: (id) =>\n    createAction(ITEM.GET_MOVIE_DETAILS, {\n      id,\n      fetching: true,\n      success: false,\n      error: null,\n    }),\n\n  successMovieDetails: (data) =>\n    createAction(ITEM.SUCCESS_MOVIE_DETAILS, {\n      ...data,\n      fetching: false,\n      success: true,\n      error: null,\n    }),\n  failureMovieDetails: (error) =>\n    createAction(ITEM.FAILURE_MOVIE_DETAILS, {\n      ...error,\n      fetching: false,\n      success: false,\n    }),\n};\n","import { put, call, takeLatest, all } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ITEM } from \"../actions/types\";\nimport { item } from \"../actions\";\nimport { API_KEY } from \"../utils\";\n\nfunction* handleGetAllMovies(action) {\n  try {\n    const { data } = yield call(\n      axios.get,\n      `https://api.themoviedb.org/3/trending/week/day?api_key=${API_KEY}`\n    );\n    yield put(item.successAllMovies({ data }));\n  } catch (e) {\n    yield put(item.failureAllMovies({ error: { ...e } }));\n  }\n}\n\nfunction* watchAllMoviesSaga() {\n  yield all([takeLatest(ITEM.GET_ALL_MOVIES, handleGetAllMovies)]);\n}\n\nexport default watchAllMoviesSaga;\n","import { put, call, takeLatest, all } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ITEM } from \"../actions/types\";\nimport { item } from \"../actions\";\nimport { API_KEY } from \"../utils\";\n\nfunction* handleGetMovieDetails(action) {\n  try {\n    const { id } = action.payload;\n    const { data } = yield call(\n      axios.get,\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`\n    );\n    yield put(item.successMovieDetails({ data }));\n  } catch (e) {\n    yield put(item.failureMovieDetails({ error: { ...e } }));\n  }\n}\n\nfunction* watchMovieSaga() {\n  yield all([takeLatest(ITEM.GET_MOVIE_DETAILS, handleGetMovieDetails)]);\n}\n\nexport default watchMovieSaga;\n","import { all, fork } from \"redux-saga/effects\";\nimport watchAllMoviesSaga from \"./allMoviesSaga\";\nimport watchMovieSaga from \"./movieSaga\";\n\nexport default function* rootSaga() {\n  yield all([fork(watchAllMoviesSaga), fork(watchMovieSaga)]);\n}\n","import { fromJS, List } from \"immutable\";\nimport { ITEM } from \"../actions/types\";\n\nconst initialState = fromJS({\n  data: new List([]),\n  fetching: false,\n  success: false,\n  error: null,\n});\n\nexport default function allMoviesReducer(state = initialState, action) {\n  switch (action.type) {\n    case ITEM.GET_ALL_MOVIES:\n    case ITEM.SUCCESS_ALL_MOVIES:\n    case ITEM.FAILURE_ALL_MOVIES:\n      return state.merge(action.payload);\n    default:\n      return state;\n  }\n}\n","import { fromJS, List } from \"immutable\";\nimport { ITEM } from \"../actions/types\";\n\nconst initialState = fromJS({\n  data: new List([]),\n  fetching: false,\n  success: false,\n  error: null,\n});\n\nexport default function allMoviesReducer(state = initialState, action) {\n  switch (action.type) {\n    case ITEM.GET_MOVIE_DETAILS:\n    case ITEM.SUCCESS_MOVIE_DETAILS:\n    case ITEM.FAILURE_MOVIE_DETAILS:\n      return state.merge(action.payload);\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux-immutable\";\nimport allMoviesReducer from \"./allMoviesReducer\";\nimport movieReducer from \"./movieReducer\";\n\nconst rootReducer = (asyncReducers) =>\n  combineReducers({\n    allMovies: allMoviesReducer,\n    movie: movieReducer,\n    ...asyncReducers,\n  });\n\nexport default rootReducer;\n","import React, { Component, Fragment } from 'react'\n\nexport const WithErrors = WrappedComponent => class ErrorBoundary extends Component {\n    state = {\n      error: null,\n      errorInfo: null,\n    }\n\n    componentDidCatch(error, errorInfo) {\n      this.setState({\n        error,\n        errorInfo,\n      })\n    }\n\n    render() {\n      const { error, errorInfo } = this.state\n\n      return (\n        <Fragment>\n          {\n            error\n              ? (\n                <Fragment>\n                  <h2>Something went wrong.</h2>\n                  <details style={{ whiteSpace: 'pre-wrap' }}>\n                    {error.toString()}\n                    <br />\n                    {errorInfo.componentStack}\n                  </details>\n                </Fragment>\n              )\n              : <WrappedComponent {...this.props} />\n          }\n        </Fragment>\n      )\n    }\n}\n","import { fromJS } from 'immutable'\nimport { compose, createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware, { END } from 'redux-saga'\nimport rootReducer from './reducers'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst configureStore = (initialState = {}, history) => {\n  const composeEnhancers = process.env.NODE_ENV !== 'production'\n    && typeof window === 'object'\n    && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      shouldHotReload: false,\n    })\n    : compose\n\n  const middlewares = [\n    sagaMiddleware,\n  ]\n\n  const enhancers = [\n    applyMiddleware(...middlewares),\n  ]\n\n  const store = createStore(\n    rootReducer(),\n    fromJS(initialState),\n    composeEnhancers(...enhancers),\n  )\n\n  store.runSaga = sagaMiddleware.run\n  store.asyncReducers = {}\n  store.close = () => store.dispatch(END)\n\n  if (module.hot) {\n    // Enable webpack hot module replacement for reducers\n    module.hot.accept(\n      './reducers',\n      () => {\n        import('./reducers').then(reducerModule => {\n          const createReducers = reducerModule.default\n          const nextReducers = createReducers(store.asyncReducers)\n          store.replaceReducer(nextReducers)\n        })\n      },\n    )\n  }\n\n  return store\n}\n\nexport default configureStore\n","import { createSelector } from \"reselect\";\n\nconst movieState = (state) => state.get(\"movie\");\n\nconst movieSelector = createSelector(movieState, (state) => {\n  const data = state.get(\"data\");\n\n  return data;\n});\n\nconst fetchingSelector = createSelector(movieState, (state) =>\n  state.get(\"fetching\")\n);\n\nconst errorSelector = createSelector(movieState, (state) => {\n  const error = state.get(\"error\");\n\n  return error;\n});\nexport { movieSelector, fetchingSelector, errorSelector };\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { movieSelector, fetchingSelector } from \"../selectors/movieSelector\";\nimport { item } from \"../actions\";\n\nimport {\n  Content,\n  MainWrapper,\n  AppWrapper,\n  Header,\n  Thumbnail,\n  H1,\n  Label,\n  Column,\n  Row,\n  Progress,\n} from \"cmr-components\";\n\nexport const DetailsContainer = () => {\n  const dispatch = useDispatch();\n  const { movieId } = useParams();\n\n  const movie = useSelector(movieSelector);\n  const fetching = useSelector(fetchingSelector);\n\n  useEffect(() => {\n    dispatch(item.requestMovieDetails(movieId));\n  }, [dispatch]);\n\n  return (\n    <AppWrapper>\n      <MainWrapper>\n        <Header logo back />\n        <Content fit>\n          {!fetching && movie && (\n            <Column stretch>\n              <Row toColumn=\"tablet\" bkg=\"purple\" radius=\"8\" marginAll>\n                <Row noShrink>\n                  <Thumbnail details movie={movie} />\n                </Row>\n                <Column color=\"white\" marginAll=\"30\">\n                  <H1>{movie.title || movie.original_title || movie.name}</H1>\n\n                  {movie.release_date && (\n                    <Row marginTop=\"5\">\n                      <Label\n                        small\n                        color=\"white\"\n                      >{`(${movie.release_date})`}</Label>\n                    </Row>\n                  )}\n\n                  {movie.vote_average && (\n                    <Row marginTop>\n                      <Progress autoColor value={movie.vote_average * 10} />\n                    </Row>\n                  )}\n\n                  {movie.overview && (\n                    <Row marginTop>\n                      <Label large color=\"white\">\n                        {movie.overview}\n                      </Label>\n                    </Row>\n                  )}\n\n                  {movie.genres && (\n                    <Block title=\"Genres:\">\n                      <Label color=\"white\">\n                        {movie.genres.map((g) => g.name).join(\", \")}\n                      </Label>\n                    </Block>\n                  )}\n\n                  {movie.production_countries && (\n                    <Block title=\"Countries:\">\n                      <Label color=\"white\">\n                        {movie.production_countries\n                          .map((c) => c.name)\n                          .join(\", \")}\n                      </Label>\n                    </Block>\n                  )}\n                </Column>\n              </Row>\n            </Column>\n          )}\n        </Content>\n      </MainWrapper>\n    </AppWrapper>\n  );\n};\n\nconst Block = ({ title, children }) => (\n  <Column marginTop>\n    <Row marginBottom=\"5\">\n      <Label semibold large color=\"white\">\n        {title}\n      </Label>\n    </Row>\n    <Label color=\"white\">{children}</Label>\n  </Column>\n);\n","import { createSelector } from \"reselect\";\n\nconst allMoviesState = (state) => state.get(\"allMovies\");\n\nconst allMoviesSelector = createSelector(allMoviesState, (state) => {\n  const data = state.get(\"data\");\n\n  return data;\n});\n\nconst fetchingSelector = createSelector(allMoviesState, (state) =>\n  state.get(\"fetching\")\n);\n\nconst errorSelector = createSelector(allMoviesState, (state) => {\n  const error = state.get(\"error\");\n\n  return error;\n});\nexport { allMoviesSelector, fetchingSelector, errorSelector };\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport {\n  allMoviesSelector,\n  fetchingSelector,\n} from \"../selectors/allMoviesSelector\";\nimport { item } from \"../actions\";\n\nimport {\n  Grid,\n  Content,\n  MainWrapper,\n  AppWrapper,\n  Header,\n  Thumbnail,\n} from \"cmr-components\";\n\nexport const HomeContainer = () => {\n  const dispatch = useDispatch();\n  const allMovies = useSelector(allMoviesSelector);\n  const fetching = useSelector(fetchingSelector);\n\n  useEffect(() => {\n    dispatch(item.requestAllMovies());\n  }, [dispatch]);\n\n  return (\n    <AppWrapper>\n      <MainWrapper>\n        <Header logo title=\"Trending this week\" />\n        <Content>\n          {!fetching && (\n            <Grid>\n              {allMovies?.results?.map((movie) => (\n                <Link key={movie.id} to={`details/${movie.id}`}>\n                  <Thumbnail movie={movie} />\n                </Link>\n              ))}\n            </Grid>\n          )}\n        </Content>\n      </MainWrapper>\n    </AppWrapper>\n  );\n};\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { DetailsContainer } from \"./containers/DetailsContainer\";\nimport { HomeContainer } from \"./containers/HomeContainer\";\nimport { WithErrors } from \"./errors/WithErrors\";\n\nexport const App = () => (\n  <Switch>\n    <Route exact path=\"/\" component={HomeContainer} />\n    <Route exact path=\"/details/:movieId\" component={DetailsContainer} />\n  </Switch>\n);\n\nexport default WithErrors(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport rootSaga from './sagas'\nimport configureStore from './store'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './styles/styles.scss'\n\nconst initialState = {}\nconst history = createBrowserHistory()\nconst store = configureStore(initialState, history)\nstore.runSaga(rootSaga)\n\nconst render = Component => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <BrowserRouter history={history}>\n        <Component />\n      </BrowserRouter>\n    </Provider>,\n    document.getElementById('root'),\n  )\n}\n\nrender(App)\n\nif (module.hot) {\n  module.hot.accept(\n    './App',\n    () => {\n      // eslint-disable-next-line\n      const App = require('./App').default\n      render(App)\n    },\n  )\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}